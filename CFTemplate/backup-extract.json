{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "JM stack to extract a snapshot to a remote destination",
  "Parameters": {
    "SrcSnapshot": {
      "Description": "Source of the snapshot",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "snap-[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "StagingVolSize": {
      "Description": "Staging volume size",
      "Type": "Number",
      "MinValue": 1024,
      "MaxValue": 16384,
      "Default": 2048,
      "ConstraintDescription": "must be a valid volume Size"
    },
    "TimeStamp": {
      "Description": "Staging volume size",
      "Type": "String",
      "ConstraintDescription": "Snapshot extraction timestamp"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SSHServerPort": {
      "Description": "TCP/IP port for Admin SSH",
      "Type": "Number",
      "MinValue": 21,
      "MaxValue": 65535,
      "Default": 2223,
      "ConstraintDescription": "must be a valid port Number"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "Zone": {
      "Description": "Zone where to create the resources",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "m1.small",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "c1.medium"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ImageId": {
      "Description": "Name of the image to be used",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "emi-[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "RegionDNS": {
      "Description": "The region DNS zone (ie: eu-west-1.amazonaws.com)",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "256",
      "AllowedPattern": "(([0-9a-zA-Z_-]+\\.)+(aero|asia|biz|com|coop|edu|gov|info|net|org|au|be|bz|ca|ch|ci|ck|cl|cm|cn|co|cz|de|es|eu|fr|in|io|uk|us)(:[0-9]+)?((([~0-9a-zA-Z_-]+))?))"
    },
    "NTPServer": {
      "Description": "The IP address to sync NTP on the first run",
      "Type": "String",
      "MinLength": "7",
      "MaxLength": "15",
      "Default": "92.63.212.161",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x"
    },
    "APIProtocol": {
      "Description": "Cloud API Protocol",
      "Type": "String",
      "Default": "http://",
      "AllowedValues": [
        "http://",
        "https://"
      ],
      "ConstraintDescription": "must be a HTTP(S) protocol"
    },
    "APIPort": {
      "Description": "Cloud API Port",
      "Type": "Number",
      "MinValue": 21,
      "MaxValue": 65535,
      "Default": 8773,
      "ConstraintDescription": "must be a valid port Number"
    }
  },
  "Conditions": {},
  "Resources": {
    "volStaging": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "Size": "1024",
        "AvailabilityZone": {
          "Ref": "Zone"
        }
      }
    },
    "volFromSnap": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "Zone"
        },
        "SnapshotId": {
          "Ref": "SrcSnapshot"
        }
      }
    },
    "ec2Staging": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {},
            "commands": {
              "0001-parted": {
                "command": "parted --version || yum install parted -y"
              },
              "0002-vdbformat": {
                "command": "while true ; do if [ `fdisk -l | grep vdb | wc -l` -gt 0 ]; then  parted -s -- /dev/vdb mklabel msdos mkpart primary 0% 100%; mkfs.xfs -f  /dev/vdb1 ; exit 0;  fi ; done"
              },
              "0004-mpointstaging": {
                "command": "mkdir /staging"
              },
              "0005-mountstaging": {
                "command": "mount /dev/vdb1 /staging"
              }
            }
          }
        }
      },
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Ref": "ImageId"
        },
        "AvailabilityZone": {
          "Ref": "Zone"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "iamBackupProfile"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "staging"
          },
          {
            "Key": "Snapshot",
            "Value": {
              "Ref": "SrcSnapshot"
            }
          },
          {
            "Key": "TimeStamp",
            "Value": {
              "Ref": "TimeStamp"
            }
          }
        ],
        "BlockDeviceMappings": [],
        "DisableApiTermination": "FALSE",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "ntpdate -u ",
                {
                  "Ref": "NTPServer"
                },
                "\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /usr/bin/cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WHec2Staging"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Run cfn init\n",
                "/usr/bin/cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -u ",
                {
                  "Ref": "APIProtocol"
                },
                "cloudformation.",
                {
                  "Ref": "RegionDNS"
                },
                ":",
                {
                  "Ref": "APIPort"
                },
                " -r ec2Staging ",
                "--region ",
                {
                  "Ref": "AWS::Region"
                },
                " --role=",
                {
                  "Ref": "iamBackupRole"
                },
                " || error_exit 'Failed to run /usr/bin/cfn-init'\n",
                "# Start up the /usr/bin/cfn-hup daemon to listen for changes\n",
                "/usr/bin/cfn-hup || error_exit 'Failed to start /usr/bin/cfn-hup'\n",
                "# All done so signal success\n",
                "/usr/bin/cfn-signal -e 0 -r \"Server setup complete\" '",
                {
                  "Ref": "WHec2Staging"
                },
                "'\n"
              ]
            ]
          }
        },
        "Volumes": [
          {
            "VolumeId": {
              "Ref": "volStaging"
            },
            "Device": "/dev/vdb"
          },
          {
            "VolumeId": {
              "Ref": "volFromSnap"
            },
            "Device": "/dev/vdc"
          }
        ],
        "SecurityGroupIds": [
          {
            "Ref": "SecurityGroup"
          }
        ]
      }
    },
    "WHec2Staging": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WCec2Staging": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "ec2Staging",
      "Properties": {
        "Handle": {
          "Ref": "WHec2Staging"
        },
        "Timeout": "2700"
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Standalone instance SG",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2223",
            "ToPort": "2223",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "iamBackupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "handle-nat",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "sts:AssumeRole",
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "cloudformation:CreateUploadBucket",
                    "cloudformation:DescribeStackEvents",
                    "cloudformation:DescribeStackResource",
                    "cloudformation:DescribeStackResources",
                    "cloudformation:GetTemplateSummary",
                    "cloudformation:ListStackResources",
                    "cloudformation:SignalResource"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "iamBackupProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "iamBackupRole"
          }
        ]
      }
    }
  },
  "Outputs": {}
}